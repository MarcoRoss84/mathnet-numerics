// <copyright file="Convolution.cs" company="Math.NET">
// Math.NET Numerics, part of the Math.NET Project
// http://numerics.mathdotnet.com
// http://github.com/mathnet/mathnet-numerics
//
// Copyright (c) 2019 Math.NET
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// </copyright>

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# var types = new[] {"float", "double", "Complex32", "Complex"}; #>

using System;
using MathNet.Numerics.Providers.Convolution;
using Complex = System.Numerics.Complex;

namespace MathNet.Numerics.Convolutions
{

    public partial class Convolution
    {

<# foreach (var type in types) { #>

        public static void Conv1D(<#= type #>[] kernel, <#= type #>[] x, <#= type #>[] y, Padding padding = Padding.Valid)
        {
            var expectedLen = GetExpectedResultLength(kernel.Length, x.Length, padding);
            if (y.Length != expectedLen)
            {
                throw new ArgumentException("Invalid size of target array, expected " + expectedLen + ", but was " + y.Length);
            }
            ConvolutionControl.Provider.Conv1D(kernel, x, GetXOffset(kernel.Length, padding), y, 0, y.Length);
        }

        public static <#= type #>[] Conv1D(<#= type #>[] kernel, <#= type #>[] x, Padding padding = Padding.Valid)
        {
            var y = new <#= type #>[GetExpectedResultLength(kernel.Length, x.Length, padding)];
            Conv1D(kernel, x, y, padding);
            return y;
        }

        public static void Conv2D(<#= type #>[,] kernel, <#= type #>[,] x, <#= type #>[,] y, Padding2D padding = Padding2D.Valid)
        {
            var expectedShape = GetExpectedResultShape(x, kernel, padding);
            var actualShape = new Tuple<int, int>(y.GetLength(0), y.GetLength(1));
            if (actualShape != expectedShape)
            {
                throw new ArgumentException("Invalid size of target array, expected " + expectedShape + ", but was " + actualShape);
            }
            var xOffset = GetXOffset(kernel, padding);
            ConvolutionControl.Provider.Conv2D(kernel, x, xOffset, y, actualShape);
        }

        public static <#= type #>[,] Conv2D(<#= type #>[,] kernel, <#= type #>[,] x, Padding2D padding = Padding2D.Valid)
        {
            var shape = GetExpectedResultShape(x, kernel, padding);
            var y = new <#= type #>[shape.Item1, shape.Item2];
            Conv2D(kernel, x, y, padding);
            return y;
        }

<# } #>

        private static int GetXOffset(int kernelLength, Padding padding)
        {
            switch (padding)
            {
                case Padding.Valid:
                    return kernelLength - 1;
                case Padding.Same:
                    return kernelLength / 2;
                case Padding.Causal:
                    return 0;
                default:
                    throw new InvalidOperationException("Unsupported padding type: " + padding);
            }
        }

        private static Tuple<int, int> GetXOffset<T>(T[,] kernel, Padding2D padding)
        {
            switch (padding)
            {
                case Padding2D.Valid:
                    return new Tuple<int, int>(kernel.GetLength(0) - 1, kernel.GetLength(1) - 1);
                case Padding2D.Same:
                    return new Tuple<int, int>(kernel.GetLength(0) / 2, kernel.GetLength(1) / 2);
                default:
                    throw new InvalidOperationException("Unsupported padding type: " + padding);
            }
        }

        private static int GetExpectedResultLength(int kernelLength, int xLength, Padding padding)
        {
            switch (padding)
            {
                case Padding.Valid:
                    return xLength - kernelLength + 1;
                case Padding.Same:
                case Padding.Causal:
                    return xLength;
                default:
                    throw new InvalidOperationException("Unsupported padding type: " + padding);
            }
        }

        private static Tuple<int, int> GetExpectedResultShape<T>(T[,] x, T[,] kernel, Padding2D padding)
        {
            if (padding == Padding2D.Same)
            {
                return new Tuple<int, int>(x.GetLength(0), x.GetLength(1));
            }
            else if (padding == Padding2D.Valid)
            {
                return new Tuple<int, int>(x.GetLength(0) - kernel.GetLength(0) + 1, x.GetLength(1) - kernel.GetLength(1) + 1);
            }
            else
            {
                throw new ArgumentException("Unsupported padding type: " + padding);
            }
        }

    }

}
